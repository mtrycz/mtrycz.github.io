Hi all, I made a **comprehensive** list of counters.

Terminology
---
What I call a **moveset** here will not be what you're used to. Here a moveset is a combination of a Pokemon, it's fastmove and it's specialmove. It's an important distintion to get your head around this. It just makes much more sense to see it this way. I don't say that a Pokemon *has* a moveset (made of a fastmove and a specialmove), I say that the combination of a Pokemon + fastmove + specialmove *is* a moveset. It'll be clear later. 


Motivation
---
The Why. I'm new to pokemon in general, and I'm kind of a nerd, and I love theorycrafting, it's part of the pleasure of the game to me. I program, have interest in machine learning and data science, and love hard&demonstrable facts.

Why an analysis based solely on types? It's the first step of a framework to more complex analyses. Also, a type based analysis has the advantage, that you don't need to recalculate *everything* when a rebalance comes - the types will hardly change (maybe they swap Twister on Gyarados? a trainer can dream...). Also, a this kind of analysis is based on a smaller number of assumptions, so it it's less likely that the results drift away from the actual mechanics.


Anyway, since all these rock-paper-scisors types are still daunting for me, I wanted an app to easily check them, and none of the data available was good-enough for me (every analysis focuses on species, and not species+fastmove+specialmove; the one that does lets you only compare one matchup at a time). So i thought I made mine.


Methodology
---
I'm really impressed with all the research going on here, lots of ideas and research. One think I thought was missing is a *comprehensive* research of all the matchups of all the movesets. There is someone that made a simulator where you can duel two movesets, but only two at a time. 

So I went on and generated all the possible matchups of 844 movesets. Yup, all 712.336 of them. 

The raw data were taken from /u/negreac 's analysis (itself based on /u/Professor_Kukui 's). Props to them, without them, this wouldn't have been possible.

I don't like Excel. It's fine for some stuff, but it get's intricately complicated for stuff like this. Also, I really don't believe Excel could manage 700k rows easily. (Also I'm aiming for research on IVs with some hard data; seeing too much anecdotal evidence, and that analysis will easily produce millions of rows, while Excel can only handle a million). So I switched to a SQL database, which made things much more simple (for me at least, I write code for a living). I started with SQLite, but it took 20 mins to produce combinations (SQLite is single-threaded), so later I switched to PostgreSQL (ten times faster). 

A SQL database is harder to set up, but it's 100x easier to "Ask questions" about the data, once it's in place. (More on that later)

A moveset was produced for each pokemon+fastmove+specialmove (844 total), consisting of 
'''
pokemonname, pokemontype1, pokemontype2, fastmovename, fastmovetype, specialmovename, specialmovetype.
'''

Each moveset was confronted against each moveset, producing 700k combinations. (Later decided to cut out not available pokemon and also leave in only fully eveloved ones; this cut the combinations to 200k)

For now the analisys is **only for types** (STAB & Effectivenes). The damage of the attacks is completely left out for now. I plan to include actual DPS (factoring in stats), and actual fighting simulations. I'm open to suggestions on this.

The result of each combination of movesets is a single number called "AttackerAdvantage" in the range of [0.51, 3.05], with higher being better for the attacker, and less than 1 meaning "negative advantage" = the defender has advantage over the attacker (hence the attacker moveset is a really bad counter the defender).

The exact formula is completely arbitrary: it's something I got in my sleep. I do think it's completely resonable and close to something actually useful, tho. 

The formula is based on one big assumption I wasn't able to verify, and would actually appreciate any data on: **The effectivnesses of attacks stack**. What I mean, is that if you have a dual type pokemon, and an attack that's supereffective to both of the types, then the damage is multiplied, ie. instead of being 1.25x, becomes '''1.25 * 1.25 = 1.56'''. Also, if you have a dual type pokemon and an attack that is not very effective against both of its types, then the damage is multiplied, ie. instead of being 0.8x, becomes '''0.8 * 0.8 = 0.64'''. If somebody can confirm this is the case, that's be awesome.

The actual formula is as follows. First, two separate values are calculated: AttackerAttackModifier which is how much the attacker moveset is effective against the defender, and AttackerDefenseModifier which is how much the attacker is resistant against the defender (it's just the inverse of how much the defender is effective against the attacker). The two numbers are then combined to give the end result: AttackerAdvantage. That's that the rest of the analysis is based upon.

The details for the calculation of AttackerAttackModifier (this is completely arbitary):
    if fastmove is STAB then fastmove_mod = 1.0, else fastmove_mod = 1.25
    same for specialmove_mod

    fastmove_mod = fastmove_mod * (effectiveness against defender's type 1) * (effectiveness against defender's type 2)
    same for specialmove_mod

    if (fastmove_mod > specialmove_mod) return fastmove_mod
    else return (fastmove_mod + specialmove_mod) /2;

(The effectiveness can be either 0.8, 1.0 or 1.25)

The reasoning behind the last 'if' is the following: if the fastmove is more effective than the specialmove, I'll just use that (people call it "no weave"); if the specialmove is more effective than the fastmove, I still need to use the fastmove to charge up the bar, so I'll make an average between the two effectivenesses.

The details for the calculation of AttackerDefenseModifier (again, this is completely arbitary):
    
    fastmove_mod = (effectiveness against attacker's type 1) * (effectiveness against attacker's type 2)
    same for specialmove_mod

	combined_mod = (fastmove_mod + specialmove_mod) /2;
	attackerDefense_mod = 1 / combined_mod;
	return attackerDefense_mod;

The reasoning here is that we don't factor in STAB here, because it's something we have absolutely no controll over (we're choosing a counter against a defender, and the defender is fixed). The AI will always "weave", so We'll do the average between the two mods. In the end: the inverse of the defender's attack advantage is the attacker's defense advantage.

The two numbers easily combine with:
    AttackerAdvantage = AttackerAttackModifier * AttackerDefenseModifier

This is the result upon which all of the results build. This number is naturally skewed towards the attackers, because we've factored in STAB only for attackers. 

Results
---

An attacker with a STAB+suppereffective fastmove, with all else being neutral, will have 1.562 advantage. So to really became a counter, we need him to have at least a double supereffectivenes, or a resistance to the defender's moves. So, *we'll consider movesets to be counters, when the advantage is higher than 1.563.*

### Question 0: And the winner is?

There are only 1.300 matchups with attackerAdvantage > 2.0, and only 4.700 with attackerAdvantage > 1.953, of a total of 200k matchups (1.953 is 1.25^3, meaning stab+hypereffectiveness or stab+supereffectivnes+resistance, or some combination). You should definitely keep an eye on those movesets, because they can 

**The grand prize goes to Omastar with Rock moves angainst Charizard with Fire moves**. It's the best combination you can get, the mollusk is superresistant to both of the dragon's moves, while having STAB bonus on both moves and double effectivenes bonus. 

Golbat also gets first in the list, but in a stupid matchup (Parasect), so it doesn't count. Surprisingly, Golbat does appear quite often in the top 1300, most of the time against bad defenders, but there are also Pinsir, Vileplume and Vanusaur. Nice.

Lots of interesting stuff, check it.

### Question 1
Are there any movesets that don't have hard counters?

	select * from (
			select defendermoveset, defendername, defenderfastmove, defenderspecialmove, max(attackeradvantage) as rating 
			from typecounters
			group by (defendermoveset, defendername, defenderfastmove, defenderspecialmove)
			order by rating desc
		) as foo 
		where rating < 1.563

Yes, there are a handful of them that don't have hard counters, based solely on types. Fortunately all of them are't the top performers. Except one. Snorlax.

### Question 2a: What are the best defenders, based solely on types?

	-- average defender moveset advantage, sorted in ascending order
	-- top to bottom - best defenders to worst defenders (by type matchups) - ie. top hare harder to counter by type
	select  defendername, defenderfastmove,defenderfastmovetype,  defenderspecialmove, defenderspecialmovetype, avg (attackeradvantage) as average
		from typecounters
		group by ( defendername, defenderfastmove, defenderfastmovetype,  defenderspecialmove, defenderspecialmovetype)
		order by average asc;

Here the result is the average of all matchups. The smaller the average the less counters the moveset has (*on average*).

Magneton, the only Steel type, is king; there are also lots of movesets with psychic, dragon and groud types, also (surprisingly to me) lots of electric (they don't have many counters)

### Question 2b: What are the best defenders, based solely on types?

	-- best defenders, by number of movesets they are vulnerable to (ascending)
	select defendermoveset, defendername, defenderfastmove, defenderspecialmove, count(*) as rating from 
	    (select attackermoveset, attackername, attackerfastmove, attackerspecialmove, defendermoveset, defendername, defenderfastmove, defenderspecialmove, attackerattackmodifier, attackerdefensemodifier, attackeradvantage
		from typecounters
		where attackeradvantage > 1.563
	) as foo
	group by (defendermoveset, defendername, defenderfastmove, defenderspecialmove)
	order by rating asc, defendermoveset asc;

This query focuses on the *number* of movesets that are supereffective against a defender. The results are stunningly different, meaning that the previous list had lots of movesets that are suppereffective most of the time, but are also supervulnerable some of the time. Here you have the boring movesets, those that have few vulnerabilities, but probably won't ever get that 3x modifier

### Question 3a: What are the best counters/attackers?
    
    -- just order the 2a query in descending order

I must say that the balancing is quite well done, with just 20% distnace from the best average advantage, to the worst, and with only a handful of movesets on the very estremes. 
King here is Parasect, all 6 of his movetypes are top 6, wow. You might be glad to see Butterfree at 10th position. Lots of Grass types in the top 100. Also pure Fire types make it to the top 100 by a small margin.

### Question 3b: What are the best counters/attackers?

    -- hard counters, by number of movesets they are counters to (descending)
	select attackername, attackerfastmove, attackerspecialmove, count(*) as rating from (select attackername, attackerfastmove, attackerspecialmove, defendername, defenderfastmove, defenderspecialmove, attackerattackmodifier, attackerdefensemodifier, attackeradvantage
		from typecounters
		where attackeradvantage > 1.563
	) as foo
	group by (attackername, attackerfastmove, attackerspecialmove)
	order by rating desc;


Magneton wins by a significant margin. I want one. If you have one, it'll be hard not to use it in any battle. Eggxecutor makes it to the top 20-25, so we now know that it's not just a good defender, but also a good attacker. Parasect is further down the list because he doesn't counter as many movesets (but the ones that he does counter, he counters them *hard*).

### Question 4a: Which is better for defending - attacks of the same or different types?

	-- for defending, are better attacks of the same or of different types?
	select avg(attackeradvantage)
	from typecounters 
	where defenderfastmovetype = defenderspecialmovetype;

	select avg(attackeradvantage)
	from typecounters 
	where defenderfastmovetype != defenderspecialmovetype;

There are 151 movesets with different attack types, and 289 (roughly twice) movesets with same attack types. 

The results of the two queries are: 1.1859 for "different" and 1.2034 for "same", meaning that *on average* an attacker has less advantage against the "different" category than the "same" category. Meaning that it's harder to defend against a moveset that has two strange types (Flying and Fire on a Charizard, both with STAB; Slobro; Eggxecutor; etc.)

### More questions?
Please send them in comments!

Conclusions
---

As far as conclusions for a work-in-progress can go...

I'm having great fun doing these. I actually stayed at home squinting my eyes at the monitor instead of going out fighting gyms. 

It all might be obvious to most, but as someone with little experience with pokemon matchups, it's giving me lots of interesting insights. By the time I finish this work, I won't need an app anymore, lol.

As far as the type system goes, it looks pretty balanced, with the notable exception of the only Steel type pokemon, and most movesets have multiple hard counters, except for a few rare ones. And most of these are weak pokemon. 

If there are any mistakes, please let me know. If you have any additional "questions" you might want me to ask to the dataset, leave a comment; I'm in search for more interesting "questions", producing more insights. I'll check it out asap (it's 2am now).

As much as I hate spreadsheets, the results are to be found here. The full table can be found here (be advised, it's 25MB csv)


TODO
---

* Check that double supereffectiveness actually stacks
* Do the DPS analysis
* Do the Simluation analysis
* Put it into an app

Thanks for reading!